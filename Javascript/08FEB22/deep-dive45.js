/** @format */

// ** 비동기 프로그래밍 ** Very important

// 실행 컨텍스트에서 살펴본 바와 같이 함수를 호출하면 함수 코드가 평가되어 함수 실행 컨텍스트가 생성된다. 이때 생성된 함수 실행 컨텍스트는 실행 컨텍스트 스택(콜 스택이라고 부른다)에 푸쉬되고 함수 코드가 실행된다. 함수 코드의 실행이 종료하면 함수 실행 컨텍스트는 실행 컨텍스트에서 팝되어 제거 된다.

// 함수가 실행되려면 '함수 코드 평가 과정'에서 생성된 함수 실행 컨텍스트가 실행 컨텍스트 스택에 푸시되어야 한다. 다시 말해 실행 컨텍스트 스택에 함수 실행 컨택스트가 푸시되는 것은 바로 함수 실행의 시작을 의미한다. 함수가 호출된 순서대로 순차적으로 실행 되는 이유는 함수가 호출된 순서대로 함수 실행 컨텍스트가 실행 컨텍스트 스택에 푸시되기 때문이다. 이처럼 함수의 실행 순서는 실행 컨텍스트 스택으로 관리한다.

// 자바스크립트 엔진은 단 하나의 실행 컨텍스트 스택을 갖는다.

// 위와 같은 이유로 인해서 싱글스레드인 자바스크립트에서는 동기처리와 비동기처리가 나눠진다. 동기처리 방식은 task를 순서대로 하나씩 처리하므로 실행 순서가 보장된다는 장점이 있지만, 앞선 태스크가 종료할 때까지 이후 태스크들이 블로킹되는 단점이 있다.

// function sleep(func, delay) {
//   const delayUntil = Date.now() + delay;

//   while (Date.now() < delayUntil);
//   func();
// }

// function foo() {
//   console.log('foo');
// }

// function bar() {
//   console.log('bar');
// }

// sleep(foo, 3 * 1000);
// bar();

// 위 에제를 타이머 함수인 setTimeout을 사용하여 수정해보자

// function foo() {
//   console.log('foo');
// }
// function bar() {
//   console.log('bar');
// }

// setTimeout(foo, 3000); // 3 초 후에 시작된다
// bar(); // bar 먼저 출력되는걸 볼 수 있다

// setTimeout 함수는 앞서 살펴본 sleep 함수와 유사하게 일정 시간이 경과한 이후에 콜백 함수를 호출하지만 setTimeout 함수 이후의 태스크를 블로킹하지 않고 곧바로 실행한다. 이처럼 현재 실행 중인 태스크가 종료되지 않은 상태라 해도 다음 태스크를 곧바로 실행하는 방식을 * 비동기 처리 * 라고 한다.

// 동기 처리 방식은 태스크를 순서대로 하나씩 처리하므로 실행 순서가 보장된다는 장점이 있지만 앞선 태스크가 종료할 때까지 이후 태스크들이 블로킹 되는 단점이 있었다. 비동기 처리 방식은 현재 실행 중인 태스크가 종료되지 않은 상태라 해도 다음 태스크를 곧바로 실행하므로 블로킹이 발생하지 않는다는 장점이 있지만, 태스크의 실행 순서가 보장되지 않은 단점이 있다. 비동기 처리를 수행하는 비동기 함수는 전통적으로 콜백 패턴을 사용한다. 비동기 처리를 위한 콜백 패턴은 콜백 헬을 발생시켜 가독성을 나쁘게 하고 비동기 처리 중 발생한 에러의 예외 처리가 곤란하며, 여러개의 비동기 처리를 한번에 처리하는데도 한게가 있다.

// * 타이머 함수인 setTimeout과 setInterval, HTTP 요청, 이벤트 핸들러는 비동기 처리 방식으로 동작한다. 비동기 처리는 이벤트 루프와 태스크 큐와 깊은 관계가 있다.

// 이벤트 루와 태스크 큐 : 자바스크립트 특징 중 하나는 싱글 스레드로 동작한다는 것이다. 하지만 브라우저가 동작 하는 것을 살펴보면 많은 태스크가 동시에 처리되는 것처럼 느껴진다. 예를 들어 HTML 요소가 애니메이션 효과를 통해 움직이면서 이벤트를 처리하기도 하고, HTTP 요청을 통해 서버로부터 데이터를 가지고 오면서 렌더링 하기도 한다. 이처럼 자바스크립트는 동시성을 지원하는 것이바로 이벤트 루프다. 이벤트 루프는 브라우저에 내장되어 있는 기능 중 하나다.

// function foo1() {
//   console.log('foo1');
// }

// function bar1() {
//   console.log('bar1');
// }

// setTimeout(foo1, 0);
// bar1();

// bar1 가 먼저 출력됨
// foo1 가 백그라운드를 거쳐 태스크 큐에 대기중이었다가 콜스택에 bar1 함수가 끝나면서 비워지면 그제서야 넘어와서 실행되게 된다.

function foo1() {
  console.log('foo1');
}
function foo2() {
  console.log('foo2');
}
function foo3() {
  console.log('foo3');
}
function foo4() {
  console.log('foo4');
}
function foo5() {
  console.log('foo5');
}

function bar1() {
  console.log('bar1');
}

foo2();
foo3();
setTimeout(foo1, 0);
bar1();
foo4();
foo5();

// 실행 순서

// foo2
// foo3
// bar1
// foo4
// foo5
// foo1
